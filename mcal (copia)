#!/bin/bash
# Comando 'cal' mejorado.
#
#
#

# Constantes
MISCRIPT=`basename $0`      # Nombre del script sin path 
AYUDA="-help"               # Parámetro para solicitar ayuda
P_MES="-m"                  # Parámetro para incluir meses en literal

ERR_NOPARAM=21              # El parámetro pasado no es correcto.


# Variables
MES=0                       # Mes a presentar
ANO=0                       # Año a presentar
MES_HOY=0                   # Mes a día de hoy
ANO_HOY=0                   # Año a día de hoy
PARAM=""                    # Parámetro a comprobar
LIT_MES=""                  # Posible parámetro de mes (-m).

# Función de ayuda
f_inicializar (){
    MES_HOY=`date +%m`
    ANO_HOY=`date +%Y`

}

# Función de ayuda
f_ayuda (){
    echo
    echo "${MISCRIPT}: calendario actualizado."
    echo
    echo "Uso: $0 [mes] [año]"
    echo
    echo "donde:"
    echo "  - [mes] respesentado entre [1..12] o [ene..dic] o [enero..diciembre]."
    echo "  - [año] representado entre [1..9999]."
    echo
} # fin f_ayuda


# Función Determina primer parámetro.
 f_busca_mes_lit () {
     MESES_ES_L="enero febrero marzo abril mayo junio julio agosto septiembre noviembre diciembre"
     MESES_ES_C="ene feb mar abr may jun jul ago sep nov dic"
     MESES_IN_L="january february march april may june july august september october november december"
     MESES_IN_C="jan feb mar apr may jun jul aug sep oct nov dec"


    PARAM=`echo $PARAM | tr [:upper:] [:lower:]`;

    for mesbase in $MESES_ES_L
    do
        if [ $PARAM = $mesbase ]
        then
            echo "Encontrado....... ${PARAM}"
            echo "--------------->"
            echo "---------------------------------------->"

            return 0;
        fi
    done

    for mesbase in $MESES_IN_L
    do
        if [ $PARAM = $mesbase ]
        then
            echo "Encontrado....... ${PARAM}"
            echo "--------------->"
            echo "---------------------------------------->"

            return 0;
        fi
    done

    for mesbase in $MESES_ES_C
    do
        if [ $PARAM = $mesbase ]
        then
            echo "Encontrado....... ${PARAM}"
            echo "--------------->"
            echo "---------------------------------------->"

            return 0;
        fi
    done

    for mesbase in $MESES_IN_C
    do
        if [ $PARAM = $mesbase ]
        then
            echo "Encontrado....... ${PARAM}"
            echo "--------------->"
            echo "---------------------------------------->"

            return 0;
        fi
    done

    return 1;

 } # fin f_busca_mes

# Función Determina primer parámetro.
 f_determina_mes () {

    if [ -n $PARAM ]
    then

        f_busca_mes_lit
        if [ $? = 0 ]
        then
            LIT_MES=$P_MES;
            MES=$PARAM;
            ANO=$ANO_HOY;

        fi

    else
        return $ERR_NOPARAM;
    fi


 } # fin f_determina_mes

########################################################
#                   INICIO 
########################################################

# Inicializamos algunos valores.
f_inicializar

# Determinamos cuántos parámetros me pasan.
case $# in
#   No hay parámetros--> mes y año actuales.
    0) 
        MES=$MES_HOY;
        ANO=$ANO_HOY;;

#   Un parámetros--> o es un mes, año o es -help.
    1)
#       ¿me pide ayuda?
        if [ $1 = $AYUDA ]
        then
            f_ayuda
            exit 0;
#       entonces puede ser un mes.
        else
            PARAM=$1;
            f_determina_mes

            if [ $? = $ERR_NOPARAM ]
            then
                echo "El valor previo de la función es: $?"
                echo
                echo
            fi
        fi;;

#   Dos parámetros--> es un mes y es un año.
    2)
#       El primero será el mes.
        PARAM=$1;
        f_determina_mes

#       El segundo será el año.
        PARAM=$2;
        f_determina_ano;;


#   No se ha podido determinar qué me piden.
    *)
        echo
        echo "No te entiendo. El formato de la orden es:"
        echo
        f_ayuda
        exit 0;;

esac


# Para validar la cantidad de parámetros de un script o una función, podemos
# utilizar el comando `test` y algunos de sus test flags:


if [ $# -gt 2 ]; then
  echo El script recibió más de 2 parámetros.
  # Lo más común en este punto sería retornar un exit code > 0 (error)
  # exit 1
fi

if [ $# -gt 1 ]; then
  echo El script recibió más de 1 parámetro.
  # exit 2
fi

if [ $# -eq 0 ]; then
  echo El script no recibió parámetros, se presentará la fecha actual.
  # exit 0
fi
















echo "--------------"
echo ${ANO}
echo ${MES}
echo "--------------"
echo
cal $LIT_MES $MES $ANO