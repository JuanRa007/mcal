#!/bin/bash
#------------------------------------------------------------------------------#
#
# Comando 'cal' mejorado.
#
#   Se permite introducir como posible parámetro del mes
#   un literal con el nombre o abreviatura del mes, 
#   tanto en español como en inglés.
#
# Ejercicio P2P 6.5 - Curso Miríadax: programación shell.
#
# Autor: JuanRa Hortal
# Derechos de autor.
#
#------------------------------------------------------------------------------#

# Constantes
MISCRIPT=`basename $0`  # Nombre del script sin path.
AYUDA="-help"           # Parámetro para solicitar ayuda.
AYUDA1="--help"         #           para solicitar ayuda también.
PARAM_MES="-m"          # Parámetro del comando "cal" para meses como textos.
ES_NUM='^[0-9]+$'       # Cadena para determinar si el parámetro es número o cadena.

# Control de errores
COD_ERROR=0             # Código de error generado por el comando.
ERR_NOPARAM=21          # El parámetro pasado no es correcto.
ERR_ANOMALO=22          # Un año con valor cero no se permite.
ERR_NOMESLIT=23         # El literal usado no existe.


# Variables globales
LIT_MES=""              # Parámetro orden "cal" con meses en texto.
MES=""                  # Mes a presentar.
ANO=""                  # Año a presentar.
MES_HOY=0               # Mes a día de hoy.
ANO_HOY=0               # Año a día de hoy.
PARAM=""                # Parámetro a comprobar.
NUPARAM=0               # Número de parámetros. Usada en función "f_determina_mes_ano".


#------------------------------------------------------------------------------#
# Función de inicializar variables.
#
# Inicializamos algunas variables que luego se usarán.
#------------------------------------------------------------------------------#
f_inicializar (){

    # Obtenemos el mes y el año del sistema.
    MES_HOY=`date +%m`
    ANO_HOY=`date +%Y`

    # Por defecto no se cuántos parámetros de dan.
    NUPARAM=0;

} # fin f_inicializar


#------------------------------------------------------------------------------#
# Función de ayuda.
#
# Presenta una pequeña ayuda de uso del comando.
#------------------------------------------------------------------------------#
f_ayuda (){

    echo
    echo "AYUDA DEL COMANDO MCAL:"
    echo "======================="
    echo
    echo "  ${MISCRIPT}: comando 'cal' mejorado."
    echo
    echo "  Uso: $0 [mes] [año]"
    echo
    echo "  donde:"
    echo "      - [mes] respesentado entre [1..12] o [ene..dic] o [enero..diciembre]"
    echo "                                           [jan..dec] o [january..december]."
    echo "      - [año] representado entre [1..9999]."
    echo
    echo "  Por ejemplo:"
    echo "      $0          Presentará el mes y año actual."
    echo "      $0 -help    Muestra esta ayuda."
    echo "      $0 jan      Presentará el mes enero (january en inglés), y el año actual."
    echo "      $0 10 2017  Presentará el mes octubre del año 2017."
    echo "      $0 2017     Presentará el calendario completo del año 2017."
    echo
    echo

} # fin f_ayuda


#------------------------------------------------------------------------------#
# Función Determina el mes a presentar.
#
# En función del parámetro $PARAM (mes)
#------------------------------------------------------------------------------#
 f_busca_mes_lit () {

    # Literales posibles para los meses, tanto en español como en inglés.
    # Abreviado y largo.
    # --> Español
    MESES_ES_L="enero febrero marzo abril mayo junio julio agosto septiembre noviembre diciembre"
    MESES_ES_C="ene feb mar abr may jun jul ago sep nov dic"
    # --> Inglés
    MESES_IN_L="january february march april may june july august september october november december"
    MESES_IN_C="jan feb mar apr may jun jul aug sep oct nov dec"

    # Pasamos a minúsculas el parámetro antes de buscarlo.
    PARAM=`echo $PARAM | tr [:upper:] [:lower:]`;

    # Empezamos a buscar el literal pasado en $PARAM. Si lo encontramos, nos vamos devolviendo un cero.
    for mesbase in $MESES_ES_L
    do
        if [ $PARAM = $mesbase ]
        then
            # Encontrado, entonces nos vamos con OK.
            return 0;
        fi
    done

    for mesbase in $MESES_IN_L
    do
        if [ $PARAM = $mesbase ]
        then
            # Encontrado, entonces nos vamos con OK.
            return 0;
        fi
    done

    for mesbase in $MESES_ES_C
    do
        if [ $PARAM = $mesbase ]
        then
            # Encontrado, entonces nos vamos con OK.
            return 0;
        fi
    done

    for mesbase in $MESES_IN_C
    do
        if [ $PARAM = $mesbase ]
        then
            # Encontrado, entonces nos vamos con OK.
            return 0;
        fi
    done

    # Solo pasará por aquí cuando no lo encuentre.
    # NO Encontrado, entonces nos vamos con NO OK (error).
    return 1;

 } # fin f_busca_mes


#------------------------------------------------------------------------------#
# Función Determina primer parámetro.
#------------------------------------------------------------------------------#
 f_determina_mes_ano () {

    # Por defecto, no hay error.
    COD_ERROR=0;

    # Primero comprobamos que no viene vacío. Solo por controlar un poco más.
    if [ -n $PARAM ]
    then

        # Primero determinamos si es un número o literal.
        if [[ $PARAM =~ $ES_NUM ]]; then

            # Es número: puede ser un mes. Lo comprobamos.
            if [ $PARAM -gt 0 ] && [ $PARAM -lt 13 ]; then

                # Lo tratamos como mes.
                MES=$PARAM;

            else

                # Si es mayor de 12, entonces en un año.
                if [ $PARAM -gt 12 ] && [ $PARAM -le 9999 ]; then

                    # Lo tratamos como año.
                    ANO=$PARAM;

                else

                    # El año cero no se representa y damos error.
                    COD_ERROR=$ERR_ANOMALO;
                    return $ERR_ANOMALO;

                fi

            fi

        else

            # Son carácteres: puede ser un mes en literal. Lo buscamos.
            f_busca_mes_lit

            # Si lo hemos encontrado (error=0)
            if [ $? = 0 ]; then

                # Lo tratamos como mes.
                MES=$PARAM;
                # Para ejecutar el comando "cal" con meses en textos,
                # se les antepone el parámetro "-m".
                LIT_MES=$PARAM_MES;

            else

                # No lo ha encontrado, por lo que daremos un error.
                COD_ERROR=$ERR_NOMESLIT;
                return $ERR_NOMESLIT;

            fi

        fi

    else

        # Este error no se debería de dar pero lo controlamos.
        COD_ERROR=$ERR_NOPARAM;
        return $ERR_NOPARAM;

    fi


 } # fin f_determina_mes


#------------------------------------------------------------------------------#
# Función Salimos presentando el error encontrado.
#------------------------------------------------------------------------------#
 f_presentar_error () {

     # Texto a presentar con el error.
     LIT_MENSA="";
     LIT_MENSA_FIN="Puede obtener ayuda del uso correcto del comando, tecleando 'mcal -help'.";

    # Control de errores
    case $COD_ERROR in

        $ERR_NOPARAM)

            LIT_MENSA="ERROR: El parámetro usado no es correcto.";;

        $ERR_ANOMALO)

            LIT_MENSA="ERROR: No se permite para el año un valor cero o superior a 9999.";;

        $ERR_NOMESLIT)

            LIT_MENSA="ERROR: El literal usado para representar el mes no es correcto.";;

        *)

            LIT_MENSA="ERROR: Error desconocido o no determinado.";;

    esac

    # Nos salimos con error.
    echo
    echo "AYUDA DEL COMANDO MCAL:"
    echo "======================="
    echo
    echo "  ${MISCRIPT}: comando 'cal' mejorado."
    echo
    echo
    echo $LIT_MENSA;
    echo $LIT_MENSA_FIN;
    echo
    exit 1;

} # fin f_presentar_error


#------------------------------------------------------------------------------#
# Función Ejecuta el comando con los parámetros elegidos.
#------------------------------------------------------------------------------#
 f_ejecutar_comando () {


    # Una vez controlados los parámetros, llegaremos aquí ya con
    # las variables "LIT_MES" "MES" "ANO" correctamente informadas.
    # Llamamos al comando con los parámetros.
    cal $LIT_MES $MES $ANO
    echo
    exit 0;

 } # fin f_ejecutar_comando


##----------------------------------------------------------------------------##
##----------------------------------------------------------------------------##
##                                                                            ##
##                   P R O G R A M A        P R I C I P A L                   ##
##                                                                            ##
##----------------------------------------------------------------------------##
##----------------------------------------------------------------------------##

# Obtenemos la fecha del día, etc.
f_inicializar;

# Determinamos cuántos parámetros me pasan.
case $# in

    # No hay parámetros--> mes y año actuales.
    0) 

        # presentamos el mes / año actual.
        f_ejecutar_comando;;

    # Un parámetros--> o es un mes, o es un año o es -help.
    1)

        # ¿es ayuda?
        if [ $1 = $AYUDA ] || [ $1 = $AYUDA1 ]; then

            # presentamos la ayuda del comando y nos vamos.
            f_ayuda
            exit 0;

        # entonces puede ser un mes o ano.
        else

            # pasamos el valor del parámetro a la variable que mirará la función.
            PARAM=$1;
            NUPARAM=1;
            f_determina_mes_ano;

            # Si devolvemos un error, avisamos y nos vamos.
            if [ $? != 0 ]; then
                
                # Mostramos el error al salir.
                f_presentar_error;

            fi;

            # Todo ha ido bien, ejecutamos el comando.
            f_ejecutar_comando;

        fi;;

#   Dos parámetros--> es un mes y es un año.
    2)

        # Dos parámetros.
        NUPARAM=2;
#       El primero será el mes.
        PARAM=$1;
        f_determina_mes_ano

        # Si devolvemos un error, avisamos y nos vamos.
        if [ $? != 0 ]; then

            # Mostramos el error al salir.
            f_presentar_error;

        fi

#######        MES_BUENO=$MES

#       El segundo será el año.
        PARAM=$2;
        f_determina_mes_ano;

        # Si devolvemos un error, avisamos y nos vamos.
        if [ $? != 0 ]; then

            # Mostramos el error al salir.
            f_presentar_error;

        fi;

#######        MES=$MES_BUENO;

        # Todo ha ido bien, ejecutamos el comando.
        f_ejecutar_comando;;

#   Tres o más parámetros, es un error.
    *)
        echo
        echo "ERROR: más parámetros de los permitidos. Teclee el comando correctamente."
        echo
        f_ayuda
        exit 1;;

esac

#
#end.